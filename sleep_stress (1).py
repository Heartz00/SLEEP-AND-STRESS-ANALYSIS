# -*- coding: utf-8 -*-
"""Sleep_Stress.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PVe4CtJmeDPGZnQCLX1oiCtTtv0EpuP_

IMPORTING THE NECESSARY LIBRARIES
"""

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.multioutput import MultiOutputClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

"""DATA OVERVIEW"""

df = pd.read_csv('/content/Sleep_Stress data.csv')

df.isnull().sum()

df['Sleep Disorder'].fillna('No Disorder', inplace=True)

df.head()

df['BMI Category'].value_counts()

df['Stress Level'].value_counts()

df['Sleep Disorder'].value_counts()

df['Occupation'].value_counts()

"""DATA PREPROCESSING"""

df['Gender'] = df['Gender'].map({'Female': 0, 'Male': 1})
df['Occupation'] = df['Occupation'].map({'Accountant': 1, 'Doctor': 2, 'Engineer': 3, 'Lawyer': 4, 'Manager': 5, 'Nurse':6,  'Salesperson': 7, 'Sales Representative': 8,
                                         'Scientist': 9,'Software Engineer':10, 'Teacher': 11})
df['BMI Category'] = df['BMI Category'].map({'Underweight': 0, 'Normal Weight': 1, 'Normal': 1,  'Overweight': 2, 'Obese': 3})
df['Sleep Disorder'] = df['Sleep Disorder'].map({'No Disorder': 0, 'Insomnia': 1, 'Sleep Apnea': 2})

df.head()

#splitting the blodd pressure to create new columns
df[['SystolicBP', 'DiastolicBP']] = df['Blood Pressure'].apply(lambda x: pd.Series(str(x).split('/')))
df.drop(columns=['Blood Pressure'], inplace=True)
df.head()

df.dtypes

df.SystolicBP = df.SystolicBP.astype('int')

df.DiastolicBP = df.DiastolicBP.astype('int')

df.columns

"""SPLITTING THE DATASET INTO TRAIN, VALIDATION AND TEST DATASET"""

X = df.drop(columns=['Unnamed: 0','Person ID', 'Stress Level', 'Sleep Disorder'])

y = df[['Stress Level', 'Sleep Disorder']]

# Split the data into train and test sets
X_train, X_temp, y_train, y_temp = train_test_split(X, y, test_size=0.3, random_state=42)

# Split the remaining data into validation and test sets
X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)

# Print the shapes of the resulting data sets
print("X_train shape:", X_train.shape)
print("y_train shape:", y_train.shape)
print("X_val shape:", X_val.shape)
print("y_val shape:", y_val.shape)
print("X_test shape:", X_test.shape)
print("y_test shape:", y_test.shape)



# Standardize the feature data
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_val = scaler.transform(X_val)
X_test = scaler.transform(X_test)

X_train[:5]

y_train[:7]

"""Multi-Output SVM Classifier - [MODEL BUILDING]"""

# Define the multi-output SVM classifier
multi_output_svm = MultiOutputClassifier(SVC(kernel='linear'), n_jobs=-1)

# Fit the model on the training data
multi_output_svm.fit(X_train, y_train)


# Calculate accuracy on training data
y_pred_train = multi_output_svm.predict(X_train)

stress_level_accuracy_train = accuracy_score(y_train['Stress Level'], y_pred_train[:, 0])
sleep_disorder_accuracy_train = accuracy_score(y_train['Sleep Disorder'], y_pred_train[:, 1])



# Predict the stress level and sleep disorder on the validation data
y_pred = multi_output_svm.predict(X_val)

stress_level_accuracy_val = accuracy_score(y_val['Stress Level'], y_pred[:, 0])
sleep_disorder_accuracy_val = accuracy_score(y_val['Sleep Disorder'], y_pred[:, 1])


print('\n Training data')

print("Stress Level Accuracy for train dataset:", stress_level_accuracy_train*100)
print("Sleep Disorder Accuracy for train dataset:", sleep_disorder_accuracy_train*100)

print('\n Validation data')

print("Stress Level Accuracy for validation:", stress_level_accuracy_val*100)
print("Sleep Disorder Accuracy for validation:", sleep_disorder_accuracy_val*100)

"""MODEL EVALUATION"""

import numpy as np


labels = ['Stress Level', 'Sleep Disorder']
validation_accuracies = [stress_level_accuracy_val, sleep_disorder_accuracy_val]
training_accuracies = [stress_level_accuracy_train, sleep_disorder_accuracy_train]

x = np.arange(len(labels))  # Create an array of evenly spaced values
width = 0.2

fig, ax = plt.subplots()
rects1 = ax.bar(x - width/2, validation_accuracies, width, label='Validation')
rects2 = ax.bar(x + width/2, training_accuracies, width, label='Training')

ax.set_ylabel('Accuracy')
ax.set_title('Accuracy by Class and Dataset')
ax.set_xticks(x)
ax.set_xticklabels(labels)
ax.legend()

plt.show()

import matplotlib.pyplot as plt
# Create a scatter plot for Stress Level with different colors for each data point
colors = ['green' if actual == predicted else 'red' for actual, predicted in zip(y_val['Stress Level'], multi_output_svm.predict(X_val)[:, 0])]
plt.scatter(y_val['Stress Level'], multi_output_svm.predict(X_val)[:, 0], c=colors)
plt.xlabel("Actual Stress Level")
plt.ylabel("Predicted Stress Level")
plt.title("Stress Level Prediction")
plt.show()

# Create a scatter plot for Sleep Disorder with different colors for each data point
colors = ['green' if actual == predicted else 'red' for actual, predicted in zip(y_val['Sleep Disorder'], multi_output_svm.predict(X_val)[:, 1])]
plt.scatter(y_val['Sleep Disorder'], multi_output_svm.predict(X_val)[:, 1], c=colors)
plt.xlabel("Actual Sleep Disorder")
plt.ylabel("Predicted Sleep Disorder")
plt.title("Sleep Disorder Prediction")
plt.show()

# Calculate the confusion matrix for each target variable
from sklearn.metrics import confusion_matrix
import pylab as pl

stress_confusion_matrix = confusion_matrix(y_val['Stress Level'], y_pred[:, 0])
sleep_disorder_confusion_matrix = confusion_matrix(y_val['Sleep Disorder'], y_pred[:, 1])

# Print the confusion matrices
print("Stress Level Confusion Matrix:\n", stress_confusion_matrix)
print("\nSleep Disorder Confusion Matrix:\n", sleep_disorder_confusion_matrix)

"""PREDICTION OF TEST DATASET"""

# Predict the stress level and sleep disorder on the test data
y_pred_test = multi_output_svm.predict(X_test)

# Print the third row of the test data
print("Third row of the test data:")
print(X_test[2])

# Print the actual y test values for the third row
print("\nActual y test values for the third row:")
print(y_test.iloc[2])

# Print the predicted values for the third row
print("\nPredicted values for the third row:")
print(y_pred_test[2])

"""FUNCTION FOR PREDICTING INPUT DATA"""

import numpy as np
def predict_stress_and_sleep_disorder(input_data):
  """
  This function takes in a list of input values and predicts the stress level and sleep disorder.

  Args:
    input_data: A list containing the following values:
      - Gender
      - Age
      - Occupation
      - Sleep Duration
      - Quality of Sleep
      - Physical Activity Level
      - BMI Category
      - Heart Rate
      - Daily Steps
      - SystolicBP
      - DiastolicBP

  Returns:
    A list containing the predicted stress level and sleep disorder.
  """

  # Convert the input values to their corresponding numerical values
    # Predict the stress level and sleep disorder
  rows = len(input_data)
  for i in range(0, rows+1):
    gender_map = {'Female': 0, 'Male': 1}
    occupation_map = {'Accountant': 1, 'Doctor': 2, 'Engineer': 3, 'Lawyer': 4, 'Manager': 5, 'Nurse':6,  'Salesperson': 7, 'Sales Representative': 8,
                                         'Scientist': 9,'Software Engineer':10, 'Teacher': 11}
    bmi_map = {'Underweight': 0, 'Normal Weight': 1, 'Normal': 1,  'Overweight': 2, 'Obese': 3}


    input_data[i][0] = gender_map[input_data[i][0]]
    input_data[i][2] = occupation_map[input_data[i][2]]
    input_data[i][6] = bmi_map[input_data[i][6]]

    # Convert the input data to a NumPy array
    input_data_as_numpy_array = np.asarray(input_data)

     # Standardize the input data
    std_data = scaler.transform(input_data_as_numpy_array.reshape(1, -1))

    prediction = multi_output_svm.predict(std_data)
    stress_level = 'Low' if prediction[i][0] < 5 else 'High'
    sleep_disorder = 'No Disorder' if prediction[i][1] == 0 else 'Insomnia' if prediction[i][1] == 1 else 'Sleep Apnea'
  # Return the predicted stress level and sleep disorder
    return stress_level, sleep_disorder

def predict_stress_and_sleep_disorder(input_data):
    """
    This function takes in a list of input values and predicts the stress level and sleep disorder.

    Args:
      input_data: A list of lists, each containing the following values:
        - Gender
        - Age
        - Occupation
        - Sleep Duration
        - Quality of Sleep
        - Physical Activity Level
        - BMI Category
        - Heart Rate
        - Daily Steps
        - SystolicBP
        - DiastolicBP

    Returns:
      A list of tuples containing the predicted stress level and sleep disorder for each input.
    """

    gender_map = {'Female': 0, 'Male': 1}
    occupation_map = {
        'Accountant': 1, 'Doctor': 2, 'Engineer': 3, 'Lawyer': 4, 'Manager': 5,
        'Nurse': 6, 'Salesperson': 7, 'Sales Representative': 8, 'Scientist': 9,
        'Software Engineer': 10, 'Teacher': 11
    }
    bmi_map = {'Underweight': 0, 'Normal Weight': 1, 'Normal': 1, 'Overweight': 2, 'Obese': 3}

    for i in range(len(input_data)):
        input_data[i][0] = gender_map[input_data[i][0]]
        input_data[i][2] = occupation_map[input_data[i][2]]
        input_data[i][6] = bmi_map[input_data[i][6]]

    # Convert the input data to a NumPy array
    input_data_as_numpy_array = np.asarray(input_data)

    # Standardize the input data
    std_data = scaler.fit_transform(input_data_as_numpy_array)

    # Make predictions
    predictions = multi_output_svm.predict(std_data)

    results = []
    for prediction in predictions:
        stress_level = 'Low' if prediction[0] < 5 else 'High'
        sleep_disorder = 'No Disorder' if prediction[1] == 0 else 'Insomnia' if prediction[1] == 1 else 'Sleep Apnea'
        results.append((stress_level, sleep_disorder))

    return results

# Example usage for prediction
input_data = [['Male', 1, 'Sales Representative', 5.9, 0, 0, 'Obese', 17, 0, 140, 90],
              ['Female', 1, 'Sales Representative', 5.9, 0, 0, 'Obese', 17, 0, 140, 90]]

predicted_stress_level, predicted_sleep_disorder = predict_stress_and_sleep_disorder(input_data)

print("Predicted Stress Level:", predicted_stress_level)
print("Predicted Sleep Disorder:", predicted_sleep_disorder)

